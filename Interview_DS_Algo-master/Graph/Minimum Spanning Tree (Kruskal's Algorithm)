/*
    Company Tags :  Amazon, Cisco, Samsung
*/

#include<bits/stdc++.h>
using namespace std;

class Edge {
    public:
        int src;
        int dest;
        int wt;
};

class Graph {
    public:
        int E;
        int V;
        Edge* edges;
};

int find(vector<vector<int>>& subsets, int i) {
    if(subsets[i][0] != i) {
        subsets[i][0] = find(subsets, subsets[i][0]);
    }
    return subsets[i][0];
}

int Union(vector<vector<int>>& subsets, int x_set, int y_set) {
    if(subsets[x_set][1] > subsets[y_set][1]) {
        subsets[y_set][0] = x_set;
    } else if(subsets[x_set][1] < subsets[y_set][1]) {
        subsets[x_set][0] = y_set;
    } else {
        subsets[y_set][0] = x_set;
        subsets[x_set][1]++;
    }
}

void makeSet(vector<vector<int>>& subsets, int V) {
    for(int i = 0; i<V; i++) {
        subsets[i][0] = i; //initially i's parent is i itself
        subsets[i][1] = 0; //initially rank of each vertex is 0
    }
}

static bool myFunction(Edge& e1, Edge& e2) {
    return e1.wt < e2.wt;
}

void KruskulMST(Graph* graph) {
    int V = graph->V;
    int E = graph->E;

    vector<vector<int>> subsets(V, vector<int>(2));
    makeSet(subsets, V);
    vector<Edge> result;
    int number_of_edges_included = 0;
    sort(graph->edges, graph->edges+E, myFunction);

    for(int i = 0; i<E; i++) {
        //we can only have V-1 edges in MST
        if(number_of_edges_included == V-1)
            break;
        Edge curr_edge = graph->edges[i];

        int x_set = find(subsets, curr_edge.src);
        int y_set = find(subsets, curr_edge.dest);

        if(x_set != y_set) {
            result.push_back(curr_edge);
            number_of_edges_included++;
            Union(subsets, x_set, y_set);
        }
    }

    cout << " Kruskul's MST:\n";
    int minEdgeSum = 0;
    for(Edge edge:result) {
        cout << edge.src << " -> " << edge.dest << " : " << edge.wt << endl;
        minEdgeSum += edge.wt;
    }
    cout << "Minimum Weight  : " << minEdgeSum << endl;
}

Graph* createGraph(int V, int E) {
    Graph* graph = new Graph();
    graph->V     = V;
    graph->E      = E;
    graph->edges = new Edge[E];

    return graph;
}

int main() {
    int V = 4;
    int E = 5;
    Graph* graph = createGraph(V, E);

    graph->edges[0].src  = 0;
    graph->edges[0].dest = 1;
    graph->edges[0].wt   = 10;

    graph->edges[1].src  = 0;
    graph->edges[1].dest = 2;
    graph->edges[1].wt   = 6;

    graph->edges[2].src  = 0;
    graph->edges[2].dest = 3;
    graph->edges[2].wt   = 5;

    graph->edges[3].src  = 1;
    graph->edges[3].dest = 3;
    graph->edges[3].wt   = 15;

    graph->edges[4].src  = 2;
    graph->edges[4].dest = 3;
    graph->edges[4].wt   = 4;

    KruskulMST(graph);

return 0;
}
