class Solution {
public:
    int result = 0;
    int m = 0, n = 0;
    bool isSafe(int i, int j) {
        if(i < 0 || i >= m || j < 0 || j >= n)
            return false;
        return true;
    }
    vector<vector<int>> directions{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    void DFS(vector<vector<int>>& grid, int i, int j, int count, int currCount) {
        if(!isSafe(i, j) || grid[i][j] == -1)
            return;
        if(grid[i][j] == 2) {
            if(currCount == count) {
                result++;
            }
            return;
        }
        
        if(currCount >= count)
            return;
        grid[i][j] = -1;
        for(vector<int> dir:directions) {
            int i_ = i + dir[0];
            int j_ = j + dir[1];
            DFS(grid, i_, j_, count, currCount+1);
        }
        grid[i][j] = 0;
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        int count = 0;
        int x = 0, y = 0;
        m = grid.size();
        n = grid[0].size();
        for(int i = 0; i<m; i++) {
            for(int j = 0; j<n; j++) {
                if(grid[i][j] == 1) {
                    x = i;
                    y = j;
                }
                if(grid[i][j] == 0)
                    count++;
            }
        }
        
        DFS(grid, x, y, count+1, 0);
        return result;
    }
};
