/*
    Company Tags  : Amazon, Google, Samsung
    Leetcode Link : https://leetcode.com/problems/shortest-path-in-binary-matrix/
    Why you can't use DFS to solve this problem ?
    Ans : https://cs.stackexchange.com/questions/4914/why-cant-dfs-be-used-to-find-shortest-paths-in-unweighted-graphs
*/

class Solution {
public:
    vector<vector<int>> directions{{1,1}, {0,1},{1,0},{0,-1},{-1,0},{-1, -1},{1, -1},{-1, 1}};
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        if(m == 0 || n == 0 || grid[0][0] != 0)
            return -1;
        
        queue<pair<int, int>> que;
        que.push({0, 0});
        grid[0][0] = 1;
        
        auto isSafe = [&](int x, int y) {
            return x>=0 && x<m && y>=0 && y<n;
        };
        
        while(!que.empty()) {
            auto curr = que.front();
            que.pop();
            int x = curr.first;
            int y = curr.second;
            
            if(x == m-1 && y == n-1)
                return grid[x][y];
            
            for(auto dir:directions) {
                int x_ = x + dir[0];
                int y_ = y + dir[1];
                
                if(isSafe(x_, y_) && grid[x_][y_] == 0) {
                    que.push({x_, y_});
                    grid[x_][y_] = grid[x][y] + 1;
                }
            }
        }
        
        return -1;
    }
};

