/*
  Company Tags           : Amazon, Google, IBM, MAQ Software, Microsoft, Walmart, Zoho
  Leetcode Question Link : https://leetcode.com/problems/word-break/
*/


//Approach-1 (Recur + Memoiz)
class Solution {
public:
    unordered_map<string, bool> mp;
    bool solve(unordered_set<string>& st, string s) {
        if(s.length() == 0)
            return true;
        if(mp.find(s) != mp.end())
            return mp[s];
        
        for(int l = 1; l<=s.length(); l++) {
            string tempL = s.substr(0, l);
            string tempR = s.substr(l);
            if(st.count(tempL) && solve(st, tempR))
                return mp[s] = true;
        }
        return mp[s] = false;
    }
    
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> st(wordDict.begin(), wordDict.end());
        
        mp.clear();
        return solve(st, s);
        
        return false;
        
    }
};

//Approach-2 (Bottom Up DP)
class Solution {
public:
    bool solve(string s, vector<string>& wordDict) {
        unordered_set<string> st(begin(wordDict), end(wordDict));
        int n = s.length();
        vector<bool> t(n+1, false);
        /*
            t[i] = True;
            It means that for string of length i, its possible to break
            the word such that broken words are in wordDict
        */
        
        t[0] = true; //string of length 0 is always true
        
        for(int i = 1; i<=n; i++) {
            //we choose different point (j) to break
            for(int j = 0; j<i; j++) {
                string temp = s.substr(j, i-j);
                
                if(st.count(temp) && t[j]) {
                    /*
                        It means from s[j...i] is in wordDict
                        And, t[j] = true means s[0...j] could
                        also be broken correctly
                    */
                    
                    t[i] = true;
                    break;
                }
            }
        }
        return t[n]; //length n
    }
    
    bool wordBreak(string s, vector<string>& wordDict) {
        return solve(s, wordDict);
    }
};
