/*
    Company Tags  : Facebook
    Leetcode Link : https://leetcode.com/problems/number-of-longest-increasing-subsequence/
*/

class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n = nums.size();
        if (n <= 1) 
            return n;
        vector<int> lengths(n);
        vector<int> counts(n, 1); //Number of sequence ending with number at ith position
        
        //Prerequisite (Please go through Longest Increasing Subsequence first. This is just an extension to it)
        //Example to understand the logic
        //Array  :  1, 3, 5, 4, 7
        //LIS    :  1, 2, 3, 3, 4
        //count  :  1, 1, 1, 1, x
        //When we come to 3rd Index of LIS and see that if lis[i]+1 == lis[j] (i=3, j = 4)
        //We realise that this is one more subsequnce that can append lis[j] i.e. 4 to it
        //So, we will add count[j] to count[i] i.e. all subsequence count ending at count[j]
        //will be added
        //So, 'x' above will become (1+1) = 2
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    if (lengths[i] <= lengths[j]) {
                        lengths[i] = lengths[j] + 1;
                        counts[i] = counts[j];
                    } else if (lengths[j] + 1 == lengths[i]) {
                        counts[i] += counts[j];
                    }
                }
            }
        }
        
        int longest = 0, ans = 0;
        for (int length: lengths) {
            longest = max(longest, length);
        }
        for (int i = 0; i < n; ++i) {
            if (lengths[i] == longest) {
                ans += counts[i];
            }
        }
        return ans;
    }
};
