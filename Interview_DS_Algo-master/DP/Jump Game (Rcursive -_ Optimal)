/*
    Company Tags  : Microsoft
    Leetcode Link : https://leetcode.com/problems/jump-game/
*/


//OPTIMAL Solution (ACCEPTED)
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int maxReachable = 0;
        int n            = nums.size();
        
        for(int i = 0; i<n; i++) {
            if(i > maxReachable) {
                return false;
            }
            maxReachable = max(maxReachable, nums[i]+i);
        }
        
        return true;
    }
};

//Recursion+Memoization (TLE in one case)
class Solution {
public:
    bool solve(vector<int>& nums, int n, int idx, unordered_map<int, bool>& mp) {
        if(idx >= n)
            return false;
        if(mp.count(idx))
            return mp[idx];
            
        if(idx == n-1)
            return mp[idx] = true;
        
        bool reach = false;
        for(int i = 1; i<=nums[idx]; i++) {
            reach = reach|solve(nums, n, idx+i, mp);
            if(reach)
                return mp[idx] = reach;
        }
        
        return mp[idx] = reach;
    }
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int, bool> mp;
        return solve(nums, n, 0, mp);
    }
};
