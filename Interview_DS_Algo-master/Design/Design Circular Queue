/*
    Company Tags  : Google, Facebook, Apple
    Leetcode Link : https://leetcode.com/problems/design-circular-queue/
*/

class MyCircularQueue {
public:
    vector<int> myQue;
    int front, rear;
    MyCircularQueue(int k) {
        myQue = vector<int>(k, -1);
        front = 0;
        rear  = 0;
    }
    
    bool enQueue(int value) {
        if(myQue[rear] != -1)
            return false;
        
        myQue[rear] = value;
        rear = (rear+1)%myQue.size(); //circular
        return true;
    }
    
    bool deQueue() {
        if(myQue[front] == -1)
            return false;
        myQue[front] = -1;
        front = (front+1)%myQue.size(); //circular
        return true;
    }
    
    int Front() {
        return myQue[front];
    }
    
    int Rear() {
        if(rear-1 < 0) //in case rear is 0 (means, last time we inserted element at the last position
                       //and we moved circularly to front)
            return myQue[myQue.size()-1];
        
        return myQue[rear-1];
    }
    
    bool isEmpty() {
        //when rear and front are equal, we have two situations
        //i)  Either the que is empty (i.e. myQue[front] or myQue[rear] == -1)
        //ii) There is one element in queue (not empty)
        return rear==front && myQue[front]==-1;
    }
    
    bool isFull() {
        //It's full when we can't put element on rear (i.e. myQue[rear] is not -1)
        return myQue[rear] != -1;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
